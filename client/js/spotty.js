// Generated by CoffeeScript 1.2.1-pre
var Channel, ChannelItemView, ChannelList, ChannelListItemView, ChannelListView, HomeView, IdentifyView, Member, MemberView, Track, TrackList, TrackListView, getValue, list_sync, member, member_sync, models, session, sp, templates, ui, views,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

sp = getSpotifyApi(1);

models = sp.require("sp://import/scripts/api/models");

views = sp.require("sp://import/scripts/api/views");

ui = sp.require("sp://import/scripts/ui");

session = models.session;

getValue = function(object, prop) {
  if (!(object && object[prop])) return null;
  if (_.isFunction(object[prop])) {
    return object[prop]();
  } else {
    return object[prop];
  }
};

templates = {
  member_identify: '\
    hell0 <%= id %>\
    <form>\
      <input type="text" name="name"><br>\
      <input type="text" name="email"><br>\
      <button class="identity-save">submit</button>\
    </form>',
  home: 'hello <%= name %>\
    <div id="channel-list">\
    </div>\
    <div id="channel-container">\
    </div>',
  channel_list_item: '<%= name %></a>',
  channel_item: '<h1>welcome to radio <%= name%></h1>\
    <div class="track-list"></div>\
    <div>\
      What do you think about this song?<br>\
      <textarea></textarea>\
      <div class="chat-list">\
      </div>\
    </div>'
};

member_sync = function(method, model, options) {
  options.url = "http://127.0.0.1:8080/api" + model.url();
  if (method === "read") options.url = options.url + model.get("id");
  return Backbone.sync(method, model, options);
};

Member = (function(_super) {

  __extends(Member, _super);

  Member.name = 'Member';

  function Member() {
    return Member.__super__.constructor.apply(this, arguments);
  }

  Member.prototype.url = function() {
    var base;
    return base = "/member/";
  };

  Member.prototype.sync = member_sync;

  Member.prototype.initialize = function() {
    return this.set({
      id: session.anonymousUserID
    });
  };

  return Member;

})(Backbone.Model);

MemberView = (function(_super) {

  __extends(MemberView, _super);

  MemberView.name = 'MemberView';

  function MemberView() {
    return MemberView.__super__.constructor.apply(this, arguments);
  }

  MemberView.prototype.initialize = function() {
    return this.render();
  };

  MemberView.prototype.render = function() {
    var dict;
    dict = this.model.toJSON();
    return this.$el.html(this.template(dict));
  };

  return MemberView;

})(Backbone.View);

IdentifyView = (function(_super) {

  __extends(IdentifyView, _super);

  IdentifyView.name = 'IdentifyView';

  function IdentifyView() {
    return IdentifyView.__super__.constructor.apply(this, arguments);
  }

  IdentifyView.prototype.events = {
    "click .identity-save": "save"
  };

  IdentifyView.prototype.save = function(e) {
    e.preventDefault();
    return this.model.save({
      name: (this.$el.find("input[name=name]")).val(),
      email: (this.$el.find("input[name=email]")).val()
    });
  };

  IdentifyView.prototype.template = _.template(templates.member_identify);

  return IdentifyView;

})(MemberView);

HomeView = (function(_super) {

  __extends(HomeView, _super);

  HomeView.name = 'HomeView';

  function HomeView() {
    return HomeView.__super__.constructor.apply(this, arguments);
  }

  HomeView.prototype.template = _.template(templates.home);

  return HomeView;

})(MemberView);

ChannelListItemView = (function(_super) {

  __extends(ChannelListItemView, _super);

  ChannelListItemView.name = 'ChannelListItemView';

  function ChannelListItemView() {
    return ChannelListItemView.__super__.constructor.apply(this, arguments);
  }

  ChannelListItemView.prototype.initialize = function() {
    return this.render();
  };

  ChannelListItemView.prototype.events = {
    "click": "selectModel"
  };

  ChannelListItemView.prototype.selectModel = function() {
    return this.model.set({
      selected: 1
    });
  };

  ChannelListItemView.prototype.template = _.template(templates.channel_list_item);

  ChannelListItemView.prototype.render = function() {
    this.$el.html(this.template(this.model.toJSON()));
    return this;
  };

  return ChannelListItemView;

})(Backbone.View);

ChannelListView = (function(_super) {

  __extends(ChannelListView, _super);

  ChannelListView.name = 'ChannelListView';

  function ChannelListView() {
    return ChannelListView.__super__.constructor.apply(this, arguments);
  }

  ChannelListView.prototype.initialize = function() {
    this.collection.on("add", this.render, this);
    this.collection.on("reset", this.renderList, this);
    this.collection.on("change:selected", this.showChannel, this);
    return this.collection.fetch();
  };

  ChannelListView.prototype.channelItemElement = false;

  ChannelListView.prototype.renderList = function(list) {
    this.$el.children().remove();
    return list.each(function(model) {
      return this.render(model);
    }, this);
  };

  ChannelListView.prototype.showChannel = function(model) {
    var channelItemView;
    channelItemView = new ChannelItemView({
      model: model,
      el: this.channelItemElement
    });
    channelItemView.render();
    return model.set({
      selected: 0
    }, {
      silent: true
    });
  };

  ChannelListView.prototype.render = function(model) {
    var channelItemView, element;
    channelItemView = new ChannelListItemView({
      model: model
    });
    element = channelItemView.render().el;
    return this.$el.append(element);
  };

  return ChannelListView;

})(Backbone.View);

Channel = (function(_super) {

  __extends(Channel, _super);

  Channel.name = 'Channel';

  function Channel() {
    return Channel.__super__.constructor.apply(this, arguments);
  }

  Channel.prototype.initialize = function() {
    return this.tracks = new TrackList({
      channel: this
    });
  };

  return Channel;

})(Backbone.Model);

ChannelItemView = (function(_super) {

  __extends(ChannelItemView, _super);

  ChannelItemView.name = 'ChannelItemView';

  function ChannelItemView() {
    return ChannelItemView.__super__.constructor.apply(this, arguments);
  }

  ChannelItemView.prototype.template = _.template(templates.channel_item);

  ChannelItemView.prototype.render = function() {
    var trackListView;
    this.$el.html(this.template(this.model.toJSON()));
    return trackListView = new TrackListView({
      collection: this.model.tracks,
      el: this.$el.find(".track-list")
    });
  };

  return ChannelItemView;

})(Backbone.View);

list_sync = function(method, model, options) {
  options.url = "http://127.0.0.1:8080/api" + getValue(model, 'url');
  return Backbone.sync(method, model, options);
};

ChannelList = (function(_super) {

  __extends(ChannelList, _super);

  ChannelList.name = 'ChannelList';

  function ChannelList() {
    return ChannelList.__super__.constructor.apply(this, arguments);
  }

  ChannelList.prototype.url = "/channels";

  ChannelList.prototype.model = Channel;

  ChannelList.prototype.sync = list_sync;

  return ChannelList;

})(Backbone.Collection);

Track = (function(_super) {

  __extends(Track, _super);

  Track.name = 'Track';

  function Track() {
    return Track.__super__.constructor.apply(this, arguments);
  }

  return Track;

})(Backbone.Model);

TrackListView = (function(_super) {

  __extends(TrackListView, _super);

  TrackListView.name = 'TrackListView';

  function TrackListView() {
    return TrackListView.__super__.constructor.apply(this, arguments);
  }

  TrackListView.prototype.initialize = function() {
    this.collection.on("reset", this.render, this);
    return this.collection.fetch();
  };

  TrackListView.prototype.render = function(tracks) {
    var playlist, playlistView;
    playlist = new models.Playlist();
    playlistView = new views.List(playlist, function(track) {
      console.log(track);
      return new views.Track(track, views.Track.FIELD.NAME);
    });
    tracks.each(function(track) {
      var spotifyId;
      spotifyId = track.get("spotify-id");
      return console.log(playlist.add("spotify:track:" + spotifyId));
    });
    playlist.add("spotify:track:4Jv7lweGIUOFQ7Oq2AtAh9");
    console.log("pView", playlistView.node);
    return this.$el.append(playlistView.node);
  };

  return TrackListView;

})(Backbone.View);

TrackList = (function(_super) {

  __extends(TrackList, _super);

  TrackList.name = 'TrackList';

  function TrackList() {
    return TrackList.__super__.constructor.apply(this, arguments);
  }

  TrackList.prototype.initialize = function(options) {
    return this.channel = options.channel;
  };

  TrackList.prototype.model = Track;

  TrackList.prototype.url = function() {
    return "/channel/" + this.channel.get("id") + "/tracks";
  };

  TrackList.prototype.sync = list_sync;

  return TrackList;

})(Backbone.Collection);

member = new Member();

member.fetch({
  error: function(object, response) {
    var identifyView;
    return identifyView = new IdentifyView({
      el: "#page-content",
      model: member
    });
  },
  success: function() {
    var channelList, channelListView, homeView;
    if (member.has("email")) {
      homeView = new HomeView({
        el: "#page-content",
        model: member
      });
      channelList = new ChannelList();
      channelListView = new ChannelListView({
        collection: channelList,
        el: "#channel-list"
      });
      return channelListView.channelItemElement = "#channel-container";
    } else {
      return console.error("cannot be here without email address");
    }
  }
});
