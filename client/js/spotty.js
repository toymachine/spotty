// Generated by CoffeeScript 1.2.1-pre
var Channel, ChannelList, ChannelListItemView, ChannelListView, HomeView, IdentifyView, Member, MemberView, channelList, channelListView, homeView, identifyView, member, models, session, sp, templates, ui, views,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

sp = getSpotifyApi(1);

models = sp.require("sp://import/scripts/api/models");

views = sp.require("sp://import/scripts/api/views");

ui = sp.require("sp://import/scripts/ui");

session = models.session;

templates = {
  member_identify: '\
    hell0 <%= id %>\
    <form>\
      <input type="text" name="name"><br>\
      <input type="text" name="email"><br>\
      <button class="identity-save">submit</button>\
    </form>',
  home: 'hello <%= name %>\
    <div id="channel-list">\
    </div>\
    <div id="channel-container">\
    </div>',
  channel_list_item: '<%= name %>'
};

Member = (function(_super) {

  __extends(Member, _super);

  Member.name = 'Member';

  function Member() {
    return Member.__super__.constructor.apply(this, arguments);
  }

  Member.prototype.localStorage = new Store("member");

  Member.prototype.initialize = function() {
    return this.set({
      id: session.anonymousUserID
    });
  };

  return Member;

})(Backbone.Model);

MemberView = (function(_super) {

  __extends(MemberView, _super);

  MemberView.name = 'MemberView';

  function MemberView() {
    return MemberView.__super__.constructor.apply(this, arguments);
  }

  MemberView.prototype.initialize = function() {
    return this.render();
  };

  MemberView.prototype.render = function() {
    var dict;
    dict = this.model.toJSON();
    return this.$el.html(this.template(dict));
  };

  return MemberView;

})(Backbone.View);

IdentifyView = (function(_super) {

  __extends(IdentifyView, _super);

  IdentifyView.name = 'IdentifyView';

  function IdentifyView() {
    return IdentifyView.__super__.constructor.apply(this, arguments);
  }

  IdentifyView.prototype.events = {
    "click .identity-save": "save"
  };

  IdentifyView.prototype.save = function(e) {
    e.preventDefault();
    return this.model.save({
      name: (this.$el.find("input[name=name]")).val(),
      email: (this.$el.find("input[name=email]")).val()
    });
  };

  IdentifyView.prototype.template = _.template(templates.member_identify);

  return IdentifyView;

})(MemberView);

HomeView = (function(_super) {

  __extends(HomeView, _super);

  HomeView.name = 'HomeView';

  function HomeView() {
    return HomeView.__super__.constructor.apply(this, arguments);
  }

  HomeView.prototype.template = _.template(templates.home);

  return HomeView;

})(MemberView);

ChannelListItemView = (function(_super) {

  __extends(ChannelListItemView, _super);

  ChannelListItemView.name = 'ChannelListItemView';

  function ChannelListItemView() {
    return ChannelListItemView.__super__.constructor.apply(this, arguments);
  }

  ChannelListItemView.prototype.initialize = function() {
    return this.render();
  };

  ChannelListItemView.prototype.template = _.template(templates.channel_list_item);

  ChannelListItemView.prototype.render = function() {
    this.$el.html(this.template(this.model.toJSON()));
    return this;
  };

  return ChannelListItemView;

})(Backbone.View);

ChannelListView = (function(_super) {

  __extends(ChannelListView, _super);

  ChannelListView.name = 'ChannelListView';

  function ChannelListView() {
    return ChannelListView.__super__.constructor.apply(this, arguments);
  }

  ChannelListView.prototype.initialize = function() {
    this.collection.on("add", this.render, this);
    this.collection.on("reset", this.renderList, this);
    return this.collection.fetch();
  };

  ChannelListView.prototype.renderList = function(list) {
    this.$el.children().remove();
    return list.each(function(model) {
      return this.render(model);
    }, this);
  };

  ChannelListView.prototype.render = function(model) {
    var channelItemView, element;
    channelItemView = new ChannelListItemView({
      model: model
    });
    element = channelItemView.render().el;
    return this.$el.append(element);
  };

  return ChannelListView;

})(Backbone.View);

Channel = (function(_super) {

  __extends(Channel, _super);

  Channel.name = 'Channel';

  function Channel() {
    return Channel.__super__.constructor.apply(this, arguments);
  }

  return Channel;

})(Backbone.Model);

ChannelList = (function(_super) {

  __extends(ChannelList, _super);

  ChannelList.name = 'ChannelList';

  function ChannelList() {
    return ChannelList.__super__.constructor.apply(this, arguments);
  }

  ChannelList.prototype.localStorage = new Store("channel-list");

  ChannelList.prototype.model = Channel;

  return ChannelList;

})(Backbone.Collection);

member = new Member();

member.fetch();

console.log(member.toJSON());

if (member.has("email")) {
  homeView = new HomeView({
    el: "#page-content",
    model: member
  });
  channelList = new ChannelList();
  channelList.fetch();
  channelListView = new ChannelListView({
    collection: channelList,
    el: "#channel-list"
  });
} else {
  identifyView = new IdentifyView({
    el: "#page-content",
    model: member
  });
}
